/* src/components/BottomSection.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	create_in_transition,
	create_out_transition,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_input_value,
	set_store_value,
	space,
	svg_element,
	transition_in,
	transition_out
} from "../../snowpack/pkg/svelte/internal.js";

import { fly } from "../../snowpack/pkg/svelte/transition.js";
import { flip } from "../../snowpack/pkg/svelte/animate.js";
import copy from "../../snowpack/pkg/copy-text-to-clipboard.js";
import { config, utmParams, builtURL } from "../stores/store.js";
import { formatters, blogURL, showConfetti } from "../common/index.js";
import Button from "./Button.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[19] = list;
	child_ctx[20] = i;
	return child_ctx;
}

// (168:20) <Button on:click={()=> addUTMRecord(id)}>
function create_default_slot_2(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M12 6v6m0 0v6m0-6h6m-6 0H6");
			attr(svg, "class", "h-5 text-gray-500");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (175:20) <Button on:click={()=> copyURL(id)} disable={!utmParam.validity}>
function create_default_slot_1(ctx) {
	let svg;
	let path;
	let svg_class_value;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6\n                                12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0\n                                002 2z");

			attr(svg, "class", svg_class_value = `h-5 ${/*utmParam*/ ctx[18].validity
			? "text-gray-500"
			: "text-gray-300"}`);

			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p(ctx, dirty) {
			if (dirty & /*$utmParams*/ 2 && svg_class_value !== (svg_class_value = `h-5 ${/*utmParam*/ ctx[18].validity
			? "text-gray-500"
			: "text-gray-300"}`)) {
				attr(svg, "class", svg_class_value);
			}
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (183:20) <Button on:click={()=> deleteUTMRecord(id)}>
function create_default_slot(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0\n                                01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1\n                                0 00-1 1v3M4 7h16");
			attr(svg, "class", "h-5 text-red-500");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (150:12) {#each $utmParams as utmParam, id}
function create_each_block(ctx) {
	let tr;
	let td0;
	let input0;
	let t0;
	let td1;
	let input1;
	let t1;
	let td2;
	let input2;
	let t2;
	let td3;
	let button0;
	let t3;
	let button1;
	let t4;
	let button2;
	let t5;
	let tr_intro;
	let tr_outro;
	let current;
	let mounted;
	let dispose;

	function input0_input_handler() {
		/*input0_input_handler*/ ctx[6].call(input0, /*each_value*/ ctx[19], /*id*/ ctx[20]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[7](/*id*/ ctx[20]);
	}

	function input1_input_handler() {
		/*input1_input_handler*/ ctx[8].call(input1, /*each_value*/ ctx[19], /*id*/ ctx[20]);
	}

	function focus_handler_1() {
		return /*focus_handler_1*/ ctx[9](/*id*/ ctx[20]);
	}

	function input2_input_handler() {
		/*input2_input_handler*/ ctx[10].call(input2, /*each_value*/ ctx[19], /*id*/ ctx[20]);
	}

	function focus_handler_2() {
		return /*focus_handler_2*/ ctx[11](/*id*/ ctx[20]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[12](/*id*/ ctx[20]);
	}

	button0 = new Button({
			props: {
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", click_handler);

	function click_handler_1() {
		return /*click_handler_1*/ ctx[13](/*id*/ ctx[20]);
	}

	button1 = new Button({
			props: {
				disable: !/*utmParam*/ ctx[18].validity,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", click_handler_1);

	function click_handler_2() {
		return /*click_handler_2*/ ctx[14](/*id*/ ctx[20]);
	}

	button2 = new Button({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	button2.$on("click", click_handler_2);

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			input0 = element("input");
			t0 = space();
			td1 = element("td");
			input1 = element("input");
			t1 = space();
			td2 = element("td");
			input2 = element("input");
			t2 = space();
			td3 = element("td");
			create_component(button0.$$.fragment);
			t3 = space();
			create_component(button1.$$.fragment);
			t4 = space();
			create_component(button2.$$.fragment);
			t5 = space();
			attr(input0, "name", "source");
			attr(input0, "class", "text-center flex-1 block w-full px-4 py-2 text-gray-600\n          truncate outline-none sm:text-sm bg-transparent");
			attr(input0, "placeholder", "Source");
			input0.required = true;
			attr(input1, "name", "medium");
			attr(input1, "class", "text-center flex-1 block w-full px-4 py-2 text-gray-600\n          truncate outline-none sm:text-sm bg-transparent");
			attr(input1, "placeholder", "Medium");
			input1.required = true;
			attr(input2, "name", "content");
			attr(input2, "class", "text-center block w-full px-4 py-2 text-gray-600\n          truncate outline-none sm:text-sm bg-transparent");
			attr(input2, "placeholder", "Content");
			attr(td3, "class", "flex justify-around py-1.5");
			attr(tr, "class", "even:bg-gray-100");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, input0);
			set_input_value(input0, /*utmParam*/ ctx[18].source);
			append(tr, t0);
			append(tr, td1);
			append(td1, input1);
			set_input_value(input1, /*utmParam*/ ctx[18].medium);
			append(tr, t1);
			append(tr, td2);
			append(td2, input2);
			set_input_value(input2, /*utmParam*/ ctx[18].content);
			append(tr, t2);
			append(tr, td3);
			mount_component(button0, td3, null);
			append(td3, t3);
			mount_component(button1, td3, null);
			append(td3, t4);
			mount_component(button2, td3, null);
			append(tr, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", input0_input_handler),
					listen(input0, "focus", focus_handler),
					listen(input1, "input", input1_input_handler),
					listen(input1, "focus", focus_handler_1),
					listen(input2, "input", input2_input_handler),
					listen(input2, "focus", focus_handler_2)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$utmParams*/ 2 && input0.value !== /*utmParam*/ ctx[18].source) {
				set_input_value(input0, /*utmParam*/ ctx[18].source);
			}

			if (dirty & /*$utmParams*/ 2 && input1.value !== /*utmParam*/ ctx[18].medium) {
				set_input_value(input1, /*utmParam*/ ctx[18].medium);
			}

			if (dirty & /*$utmParams*/ 2 && input2.value !== /*utmParam*/ ctx[18].content) {
				set_input_value(input2, /*utmParam*/ ctx[18].content);
			}

			const button0_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};
			if (dirty & /*$utmParams*/ 2) button1_changes.disable = !/*utmParam*/ ctx[18].validity;

			if (dirty & /*$$scope, $utmParams*/ 2097154) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);

			add_render_callback(() => {
				if (tr_outro) tr_outro.end(1);
				if (!tr_intro) tr_intro = create_in_transition(tr, fly, { y: -50, duration: 300 });
				tr_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			if (tr_intro) tr_intro.invalidate();
			tr_outro = create_out_transition(tr, fly, { y: -50, duration: 100 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			destroy_component(button0);
			destroy_component(button1);
			destroy_component(button2);
			if (detaching && tr_outro) tr_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let table;
	let thead;
	let t9;
	let tbody;
	let current;
	let each_value = /*$utmParams*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr class="text-gray-500 border-b border-gray-300"><th class="w-1/4 px-4 py-2 cursor-pointer" title="Required: Newsletter, Website, App">Source<span class="text-sm text-red-500">*</span></th> 
                <th class="w-1/4 px-4 py-2 cursor-pointer" title="Required: Email, Social, Social Paid, CPC, Display, Affiliate, Referral, Chat">Medium<span class="text-sm text-red-500">*</span></th> 
                <th class="w-1/4 px-4 py-2 cursor-pointer" title="Sub Reddit, Groups, ...">Content</th> 
                <th class="w-1/4 px-4 py-2 cursor-pointer">Actions</th></tr>`;

			t9 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(thead, "class", "text-left text-center");
			attr(table, "class", "bg-white border-collapse table-auto");
			attr(div, "class", "w-full mb-3 overflow-auto");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, table);
			append(table, thead);
			append(table, t9);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*deleteUTMRecord, $utmParams, copyURL, addUTMRecord, selectedId*/ 31) {
				each_value = /*$utmParams*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $utmParams;
	let $config;
	let $builtURL;
	component_subscribe($$self, utmParams, $$value => $$invalidate(1, $utmParams = $$value));
	component_subscribe($$self, config, $$value => $$invalidate(5, $config = $$value));
	component_subscribe($$self, builtURL, $$value => $$invalidate(15, $builtURL = $$value));
	let selectedId = 0;

	const addUTMRecord = id => {
		$$invalidate(0, selectedId = id);
		let tmp = $utmParams;
		tmp.splice(id + 1, 0, { ...$utmParams[id] });
		set_store_value(utmParams, $utmParams = [...tmp], $utmParams);
	};

	const deleteUTMRecord = id => {
		if (id) {
			$$invalidate(0, selectedId = id < $utmParams.length - 1 ? id : id - 1);
		} else {
			$$invalidate(0, selectedId = 0);
		}

		if ($utmParams.length === 1) {
			set_store_value(utmParams, $utmParams = [initialUTMParams], $utmParams);
			return;
		}

		let tmp = $utmParams;
		tmp.splice(id, 1);
		set_store_value(utmParams, $utmParams = [...tmp], $utmParams);
	};

	const buildURL = () => {
		let { url, campaign, terms } = $config;
		url = url.trim();

		if (!url) {
			return blogURL;
		}

		let tmp = url;
		let { source, medium, content } = $utmParams[selectedId];
		campaign = campaign.trim();
		terms = terms.trim();
		source = source.trim();
		medium = medium.trim();
		content = content.trim();

		if (campaign) {
			tmp += `?utm_campaign=${campaign}`;

			if (source) {
				tmp += `&utm_source=${source}`;
			}

			if (medium) {
				tmp += `&utm_medium=${medium}`;

				if (terms) {
					tmp += `&utm_term=${terms}`;
				}

				if (content) {
					tmp += `&utm_content=${content}`;
				}

				return tmp;
			}
		}

		return "";
	};

	function checkValidity() {
		set_store_value(
			utmParams,
			$utmParams = $utmParams.map(params => {
				const { source, medium } = params;

				return {
					...params,
					validity: $config.campaign && source && medium
				};
			}),
			$utmParams
		);
	}

	const copyURL = id => {
		$$invalidate(0, selectedId = id);
		copy(encodeURI($builtURL));
		showConfetti();

		iziToast.success({
			title: "OK",
			message: "Copied to Clipboard!",
			position: "topRight"
		});
	};

	function input0_input_handler(each_value, id) {
		each_value[id].source = this.value;
		utmParams.set($utmParams);
	}

	const focus_handler = id => $$invalidate(0, selectedId = id);

	function input1_input_handler(each_value, id) {
		each_value[id].medium = this.value;
		utmParams.set($utmParams);
	}

	const focus_handler_1 = id => $$invalidate(0, selectedId = id);

	function input2_input_handler(each_value, id) {
		each_value[id].content = this.value;
		utmParams.set($utmParams);
	}

	const focus_handler_2 = id => $$invalidate(0, selectedId = id);
	const click_handler = id => addUTMRecord(id);
	const click_handler_1 = id => copyURL(id);
	const click_handler_2 = id => deleteUTMRecord(id);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$config, $utmParams, selectedId*/ 35) {
			$: {
				const format = formatters[$config.format];

				const tmp = $utmParams.map(param => {
					const { source, medium, content } = param;

					return {
						...param,
						source: format(source),
						medium: format(medium),
						content: format(content)
					};
				});

				set_store_value(utmParams, $utmParams = tmp, $utmParams);
				set_store_value(builtURL, $builtURL = buildURL(selectedId), $builtURL);
				checkValidity();
			}
		}
	};

	return [
		selectedId,
		$utmParams,
		addUTMRecord,
		deleteUTMRecord,
		copyURL,
		$config,
		input0_input_handler,
		focus_handler,
		input1_input_handler,
		focus_handler_1,
		input2_input_handler,
		focus_handler_2,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class BottomSection extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default BottomSection;