/* src/App.svelte generated by Svelte v3.32.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_in_transition,
	create_out_transition,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	select_option,
	select_value,
	set_input_value,
	set_style,
	space,
	svg_element,
	text,
	transition_in,
	transition_out
} from "../snowpack/pkg/svelte/internal.js";

import { onMount } from "../snowpack/pkg/svelte.js";
import { fly } from "../snowpack/pkg/svelte/transition.js";
import { flip } from "../snowpack/pkg/svelte/animate.js";
import copy from "../snowpack/pkg/copy-text-to-clipboard.js";
import confetti from "../snowpack/pkg/canvas-confetti.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	child_ctx[31] = list;
	child_ctx[32] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	return child_ctx;
}

// (373:24) {#each formatOptions as option}
function create_each_block_1(ctx) {
	let option;
	let t_value = /*option*/ ctx[33] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*option*/ ctx[33];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (418:20) {#each utmParams as utmParam, id}
function create_each_block(ctx) {
	let tr;
	let td0;
	let input0;
	let t0;
	let td1;
	let input1;
	let t1;
	let td2;
	let input2;
	let t2;
	let td3;
	let button0;
	let t3;
	let button1;
	let svg1;
	let path1;
	let svg1_class_value;
	let button1_class_value;
	let t4;
	let button2;
	let t5;
	let tr_intro;
	let tr_outro;
	let current;
	let mounted;
	let dispose;

	function input0_input_handler_1() {
		/*input0_input_handler_1*/ ctx[15].call(input0, /*each_value*/ ctx[31], /*id*/ ctx[32]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[16](/*id*/ ctx[32]);
	}

	function input1_input_handler_1() {
		/*input1_input_handler_1*/ ctx[17].call(input1, /*each_value*/ ctx[31], /*id*/ ctx[32]);
	}

	function focus_handler_1() {
		return /*focus_handler_1*/ ctx[18](/*id*/ ctx[32]);
	}

	function input2_input_handler_1() {
		/*input2_input_handler_1*/ ctx[19].call(input2, /*each_value*/ ctx[31], /*id*/ ctx[32]);
	}

	function focus_handler_2() {
		return /*focus_handler_2*/ ctx[20](/*id*/ ctx[32]);
	}

	function click_handler() {
		return /*click_handler*/ ctx[21](/*id*/ ctx[32]);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[22](/*id*/ ctx[32]);
	}

	function click_handler_2() {
		return /*click_handler_2*/ ctx[23](/*id*/ ctx[32]);
	}

	return {
		c() {
			tr = element("tr");
			td0 = element("td");
			input0 = element("input");
			t0 = space();
			td1 = element("td");
			input1 = element("input");
			t1 = space();
			td2 = element("td");
			input2 = element("input");
			t2 = space();
			td3 = element("td");
			button0 = element("button");
			button0.innerHTML = `<svg class="h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`;
			t3 = space();
			button1 = element("button");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t4 = space();
			button2 = element("button");

			button2.innerHTML = `<svg class="h-5 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0
                      01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1
                      0 00-1 1v3M4 7h16"></path></svg>`;

			t5 = space();
			attr(input0, "name", "source");
			attr(input0, "class", "text-center flex-1 block w-full px-4 py-2 text-gray-600\n                  truncate outline-none sm:text-sm bg-transparent");
			attr(input0, "placeholder", "Source");
			input0.required = true;
			attr(input1, "name", "medium");
			attr(input1, "class", "text-center flex-1 block w-full px-4 py-2 text-gray-600\n                  truncate outline-none sm:text-sm bg-transparent");
			attr(input1, "placeholder", "Medium");
			input1.required = true;
			attr(input2, "name", "content");
			attr(input2, "class", "text-center block w-full px-4 py-2 text-gray-600\n                  truncate outline-none sm:text-sm bg-transparent");
			attr(input2, "placeholder", "Content");
			attr(button0, "type", "button w-full");
			attr(button0, "class", "inline-flex items-center p-1 text-sm font-medium\n                                text-gray-700 bg-transparent rounded-md shadow-sm hover:bg-gray-50\n                                focus:outline-none focus:ring-2 focus:ring-offset-2\n                                focus:ring-indigo-500");
			attr(path1, "stroke-linecap", "round");
			attr(path1, "stroke-linejoin", "round");
			attr(path1, "stroke-width", "2");
			attr(path1, "d", "M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6\n                      12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0\n                      002 2z");

			attr(svg1, "class", svg1_class_value = `h-5 ${/*utmParam*/ ctx[30].validity
			? "text-gray-500"
			: "text-gray-300"}`);

			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "fill", "none");
			attr(svg1, "viewBox", "0 0 24 24");
			attr(svg1, "stroke", "currentColor");
			attr(button1, "id", "copy-url");
			attr(button1, "type", "button w-full");

			attr(button1, "class", button1_class_value = `inline-flex items-center p-1 text-sm
                                font-medium text-gray-700 bg-transparent rounded-md shadow-sm hover:bg-gray-50
                                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                                ${/*utmParam*/ ctx[30].validity
			? ""
			: "cursor-default pointer-events-none"}`);

			attr(button2, "type", "button w-full");
			attr(button2, "class", "inline-flex items-center p-1 text-sm font-medium\n                                text-gray-700 bg-transparent rounded-md shadow-sm tooltip\n                                hover:bg-gray-50 focus:outline-none focus:ring-2\n                                focus:ring-offset-2 focus:ring-indigo-500");
			attr(td3, "class", "flex justify-around py-1.5");
			attr(tr, "class", "even:bg-gray-100");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			append(tr, td0);
			append(td0, input0);
			set_input_value(input0, /*utmParam*/ ctx[30].source);
			append(tr, t0);
			append(tr, td1);
			append(td1, input1);
			set_input_value(input1, /*utmParam*/ ctx[30].medium);
			append(tr, t1);
			append(tr, td2);
			append(td2, input2);
			set_input_value(input2, /*utmParam*/ ctx[30].content);
			append(tr, t2);
			append(tr, td3);
			append(td3, button0);
			append(td3, t3);
			append(td3, button1);
			append(button1, svg1);
			append(svg1, path1);
			append(td3, t4);
			append(td3, button2);
			append(tr, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", input0_input_handler_1),
					listen(input0, "focus", focus_handler),
					listen(input1, "input", input1_input_handler_1),
					listen(input1, "focus", focus_handler_1),
					listen(input2, "input", input2_input_handler_1),
					listen(input2, "focus", focus_handler_2),
					listen(button0, "click", click_handler),
					listen(button1, "click", click_handler_1),
					listen(button2, "click", click_handler_2)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*utmParams*/ 2 && input0.value !== /*utmParam*/ ctx[30].source) {
				set_input_value(input0, /*utmParam*/ ctx[30].source);
			}

			if (dirty[0] & /*utmParams*/ 2 && input1.value !== /*utmParam*/ ctx[30].medium) {
				set_input_value(input1, /*utmParam*/ ctx[30].medium);
			}

			if (dirty[0] & /*utmParams*/ 2 && input2.value !== /*utmParam*/ ctx[30].content) {
				set_input_value(input2, /*utmParam*/ ctx[30].content);
			}

			if (!current || dirty[0] & /*utmParams*/ 2 && svg1_class_value !== (svg1_class_value = `h-5 ${/*utmParam*/ ctx[30].validity
			? "text-gray-500"
			: "text-gray-300"}`)) {
				attr(svg1, "class", svg1_class_value);
			}

			if (!current || dirty[0] & /*utmParams*/ 2 && button1_class_value !== (button1_class_value = `inline-flex items-center p-1 text-sm
                                font-medium text-gray-700 bg-transparent rounded-md shadow-sm hover:bg-gray-50
                                focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500
                                ${/*utmParam*/ ctx[30].validity
			? ""
			: "cursor-default pointer-events-none"}`)) {
				attr(button1, "class", button1_class_value);
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (tr_outro) tr_outro.end(1);
				if (!tr_intro) tr_intro = create_in_transition(tr, fly, { y: -50, duration: 300 });
				tr_intro.start();
			});

			current = true;
		},
		o(local) {
			if (tr_intro) tr_intro.invalidate();
			tr_outro = create_out_transition(tr, fly, { y: -50, duration: 100 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (detaching && tr_outro) tr_outro.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let a0;
	let t0;
	let header;
	let t2;
	let main;
	let section0;
	let div6;
	let div1;
	let label0;
	let t3;
	let div0;
	let input0;
	let t4;
	let div5;
	let div2;
	let label1;
	let t7;
	let select;
	let t8;
	let div3;
	let label2;
	let t11;
	let input1;
	let t12;
	let div4;
	let label3;
	let t14;
	let input2;
	let t15;
	let section1;
	let div7;
	let table;
	let thead;
	let t25;
	let tbody;
	let t26;
	let textarea;
	let t27;
	let footer;
	let button;
	let svg1;
	let path1;
	let t28;
	let section2;
	let div8;
	let a1;
	let t31;
	let div11;
	let t38;
	let p;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = /*formatOptions*/ ctx[4];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*utmParams*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			a0 = element("a");
			a0.innerHTML = `<img loading="lazy" width="149" height="149" src="https://github.blog/wp-content/uploads/2008/12/forkme_right_white_ffffff.png?resize=149%2C149" class="attachment-full size-full" alt="Fork me on GitHub" data-recalc-dims="1"/>`;
			t0 = space();
			header = element("header");
			header.innerHTML = `<h1 class="text-4xl font-bold text-white">Derpy UTM Builder</h1>`;
			t2 = space();
			main = element("main");
			section0 = element("section");
			div6 = element("div");
			div1 = element("div");
			label0 = element("label");

			label0.innerHTML = `<svg class="w-5 h-5 text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M12.586 4.586a2 2 0 112.828 2.828l-3 3a2 2 0 01-2.828 0 1 1 0
              00-1.414 1.414 4 4 0 005.656 0l3-3a4 4 0 00-5.656-5.656l-1.5 1.5a1
              1 0 101.414 1.414l1.5-1.5zm-5 5a2 2 0 012.828 0 1 1 0
              101.414-1.414 4 4 0 00-5.656 0l-3 3a4 4 0 105.656 5.656l1.5-1.5a1
              1 0 10-1.414-1.414l-1.5 1.5a2 2 0 11-2.828-2.828l3-3z" clip-rule="evenodd"></path></svg>`;

			t3 = space();
			div0 = element("div");
			input0 = element("input");
			t4 = space();
			div5 = element("div");
			div2 = element("div");
			label1 = element("label");
			label1.innerHTML = `Format<span class="text-sm text-red-500">*</span>`;
			t7 = space();
			select = element("select");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t8 = space();
			div3 = element("div");
			label2 = element("label");
			label2.innerHTML = `Campaign<span class="text-sm text-red-500">*</span>`;
			t11 = space();
			input1 = element("input");
			t12 = space();
			div4 = element("div");
			label3 = element("label");
			label3.textContent = "Terms";
			t14 = space();
			input2 = element("input");
			t15 = space();
			section1 = element("section");
			div7 = element("div");
			table = element("table");
			thead = element("thead");

			thead.innerHTML = `<tr class="text-gray-500 border-b border-gray-300"><th class="w-1/4 px-4 py-2 cursor-pointer" title="Required: Newsletter, Website, App">Source<span class="text-sm text-red-500">*</span></th> 
                        <th class="w-1/4 px-4 py-2 cursor-pointer" title="Required: Email, Social, Social Paid, CPC, Display, Affiliate, Referral, Chat">Medium<span class="text-sm text-red-500">*</span></th> 
                        <th class="w-1/4 px-4 py-2 cursor-pointer" title="Sub Reddit, Groups, ...">Content</th> 
                        <th class="w-1/4 px-4 py-2 cursor-pointer">Actions</th></tr>`;

			t25 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t26 = space();
			textarea = element("textarea");
			t27 = space();
			footer = element("footer");
			button = element("button");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t28 = space();
			section2 = element("section");
			div8 = element("div");
			a1 = element("a");

			a1.innerHTML = `<figure><img src="https://d2gdx5nv84sdx2.cloudfront.net/uploads/pq6gukie/marketing_asset/banner/4835/ghost-squircle.png" alt="Ghost Pro" border="0" class="mb-2"/> 
                    <figcaption class="font-medium hover:underline">Ghost (Pro)</figcaption></figure>`;

			t31 = space();
			div11 = element("div");

			div11.innerHTML = `<div>👈 This is an affiliate link for the best blog tool in the world.
                <br/>
                (Even I use it for my Blog!)</div> 
            <div>See
                <a class="text-white hover:underline" href="https://www.derpycoder.com/disclosure/" target="_blank" rel="noopener">Disclosure Policy</a>
                for more.</div>`;

			t38 = space();
			p = element("p");

			p.innerHTML = `Made with ❤️ by
        <a target="_blank" rel="noopener" class="hover:underline" href="https://www.derpycoder.com">DerpyCoder</a>`;

			attr(a0, "class", "hidden md:block");
			attr(a0, "target", "_blank");
			attr(a0, "rel", "noopener");
			attr(a0, "href", "https://github.com/abhijit-kar/snowtail");
			set_style(a0, "position", "fixed");
			set_style(a0, "top", "0");
			set_style(a0, "right", "0");
			set_style(a0, "border", "0");
			set_style(a0, "z-index", "9999");
			set_style(a0, "width", "149px");
			set_style(a0, "height", "149px");
			attr(header, "class", "mt-10 mb-10");
			attr(label0, "for", "company_website");
			attr(label0, "class", "inline-flex items-center px-3 px-4 py-2 text-sm text-gray-500\n          border border-r-0 border-gray-300 rounded-l-md bg-gray-50");
			attr(input0, "name", "url");
			attr(input0, "class", "text-gray-600 flex-1 block w-full px-4 py-2 border\n            border-gray-300 rounded-none outline-none focus:ring-1\n            focus:ring-indigo-500 focus:border-indigo-500 rounded-r-md\n            sm:text-sm");
			attr(input0, "placeholder", blogURL);
			attr(div0, "class", "flex w-full rounded-md shadow-sm");
			attr(div1, "class", "flex mb-5");
			attr(label1, "class", "font-semibold text-gray-500 ml-1");
			attr(label1, "title", "Format of Params");
			attr(label1, "for", "format");
			attr(select, "id", "format");
			attr(select, "name", "format");
			attr(select, "autocomplete", "country");
			attr(select, "class", "text-gray-600 w-full block px-3 py-2 text-right bg-white\n            border border-gray-300 rounded-md shadow-sm outline-none\n            appearance-none focus:ring-1 focus:outline-none\n            focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm");
			if (/*config*/ ctx[0].format === void 0) add_render_callback(() => /*select_change_handler*/ ctx[12].call(select));
			attr(label2, "class", "font-semibold text-gray-500 ml-1");
			attr(label2, "title", "Required: Black Friday, Cyber Monday, ...");
			attr(label2, "for", "campaign");
			attr(input1, "name", "campaign");
			attr(input1, "id", "campaign");
			attr(input1, "class", "text-gray-600 w-full px-4 py-2 border border-gray-300\n            rounded-md outline-none focus:ring-1 focus:ring-indigo-500\n            focus:border-indigo-500 sm:text-sm");
			attr(input1, "placeholder", "Campaign");
			attr(label3, "class", "font-semibold text-gray-500 ml-1");
			attr(label3, "title", "Keywords Associated");
			attr(label3, "for", "terms");
			attr(input2, "name", "terms");
			attr(input2, "id", "terms");
			attr(input2, "class", "text-gray-600 w-full px-4 py-2 border border-gray-300\n            rounded-md outline-none focus:ring-1 focus:ring-indigo-500\n            focus:border-indigo-500 sm:text-sm");
			attr(input2, "placeholder", "Terms");
			attr(div5, "class", "grid grid-cols-3 gap-4");
			attr(div6, "class", "relative flex flex-col justify-between inline-block text-left");
			attr(section0, "class", "relative p-8 mb-6 bg-white rounded-lg shadow-2xl");
			attr(thead, "class", "text-left text-center");
			attr(table, "class", "bg-white border-collapse table-auto");
			attr(div7, "class", "w-full mb-3 overflow-auto");
			attr(textarea, "class", "p-2 resize-none w-full text-center text-gray-400 outline-none focus:ring-2\n      focus:ring-indigo-500 focus:border-indigo-500 rounded-md");
			attr(textarea, "id", "story");
			attr(textarea, "name", "story");
			attr(textarea, "rows", "3");
			textarea.value = /*builtURL*/ ctx[3];
			attr(section1, "class", "relative p-8 pb-3 bg-white rounded-lg shadow-2xl");
			attr(main, "class", "w-11/12 mb-6 xs:w-10/12 sm:w-9/12 md:w-8/12 lg:w-7/12 xl:w-6/12\n  2xl:2-5/12");
			attr(path1, "d", "M22 41C32.4934 41 41 32.4934 41 22 41 11.5066 32.4934 3 22 3 11.5066\n        3 3 11.5066 3 22s8.5066 19 19 19zM7 22C7 13.7157 13.7157 7 22\n        7V37C13.7157 37 7 30.2843 7 22z");
			attr(svg1, "class", "inline-block cursor-pointer fill-current");
			attr(svg1, "width", "24");
			attr(svg1, "height", "24");
			attr(svg1, "viewBox", "0 0 48 48");
			attr(svg1, "fill", "none");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "id", "theme-switcher");
			attr(button, "class", "mb-6 text-indigo-900 select-none dark:text-white focus:outline-none");
			attr(a1, "id", "affiliate-link");
			attr(a1, "href", "https://ghost.org?via=derpycoder");
			attr(a1, "target", "_blank");
			attr(a1, "rel", "noopener");
			attr(div8, "class", "w-2/5 mr-2");
			attr(div11, "class", "flex flex-col justify-around w-4/5");
			attr(section2, "class", "flex justify-center p-5 mb-2 mb-6 text-xs text-gray-900 bg-white\n    shadow-2xl bg-opacity-30 w-referral rounded-xl");
			attr(p, "class", "text-white");
			attr(footer, "class", "mb-3");
		},
		m(target, anchor) {
			insert(target, a0, anchor);
			insert(target, t0, anchor);
			insert(target, header, anchor);
			insert(target, t2, anchor);
			insert(target, main, anchor);
			append(main, section0);
			append(section0, div6);
			append(div6, div1);
			append(div1, label0);
			append(div1, t3);
			append(div1, div0);
			append(div0, input0);
			set_input_value(input0, /*config*/ ctx[0].url);
			append(div6, t4);
			append(div6, div5);
			append(div5, div2);
			append(div2, label1);
			append(div2, t7);
			append(div2, select);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(select, null);
			}

			select_option(select, /*config*/ ctx[0].format);
			append(div5, t8);
			append(div5, div3);
			append(div3, label2);
			append(div3, t11);
			append(div3, input1);
			set_input_value(input1, /*config*/ ctx[0].campaign);
			append(div5, t12);
			append(div5, div4);
			append(div4, label3);
			append(div4, t14);
			append(div4, input2);
			set_input_value(input2, /*config*/ ctx[0].terms);
			append(main, t15);
			append(main, section1);
			append(section1, div7);
			append(div7, table);
			append(table, thead);
			append(table, t25);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			append(section1, t26);
			append(section1, textarea);
			insert(target, t27, anchor);
			insert(target, footer, anchor);
			append(footer, button);
			append(button, svg1);
			append(svg1, path1);
			append(footer, t28);
			append(footer, section2);
			append(section2, div8);
			append(div8, a1);
			append(section2, t31);
			append(section2, div11);
			append(footer, t38);
			append(footer, p);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input0, "input", /*input0_input_handler*/ ctx[11]),
					listen(select, "change", /*select_change_handler*/ ctx[12]),
					listen(input1, "input", /*input1_input_handler*/ ctx[13]),
					listen(input2, "input", /*input2_input_handler*/ ctx[14]),
					listen(svg1, "click", /*toggleTheme*/ ctx[9]),
					listen(a1, "click", /*showFireWorks*/ ctx[8])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*config, formatOptions*/ 17 && input0.value !== /*config*/ ctx[0].url) {
				set_input_value(input0, /*config*/ ctx[0].url);
			}

			if (dirty[0] & /*formatOptions*/ 16) {
				each_value_1 = /*formatOptions*/ ctx[4];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(select, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty[0] & /*config, formatOptions*/ 17) {
				select_option(select, /*config*/ ctx[0].format);
			}

			if (dirty[0] & /*config, formatOptions*/ 17 && input1.value !== /*config*/ ctx[0].campaign) {
				set_input_value(input1, /*config*/ ctx[0].campaign);
			}

			if (dirty[0] & /*config, formatOptions*/ 17 && input2.value !== /*config*/ ctx[0].terms) {
				set_input_value(input2, /*config*/ ctx[0].terms);
			}

			if (dirty[0] & /*deleteUTMRecord, utmParams, copyURL, addUTMRecord, selectedId*/ 230) {
				each_value = /*utmParams*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty[0] & /*builtURL*/ 8) {
				textarea.value = /*builtURL*/ ctx[3];
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(a0);
			if (detaching) detach(t0);
			if (detaching) detach(header);
			if (detaching) detach(t2);
			if (detaching) detach(main);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t27);
			if (detaching) detach(footer);
			mounted = false;
			run_all(dispose);
		}
	};
}

const blogURL = "https://www.derpycoder.com";
const stripSeparatorRegex = /-|_|\+/g;

function setTheme() {
	if (localStorage.theme === "dark") {
		document.documentElement.classList.add("dark");
	} else {
		document.documentElement.classList.remove("dark");
	}
}

function initTheme() {
	if (!"theme" in localStorage) {
		if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
			localStorage.theme = "dark";
		} else {
			localStorage.theme = "light";
		}
	}

	setTheme();
}

function instance($$self, $$props, $$invalidate) {
	const formatOptions = [
		"Title Case",
		"plus+case",
		"kebab-case",
		"snake_case",
		"lower case",
		"fReE ForM"
	];

	const formatters = {
		"Title Case": val => {
			if (!val) {
				return "";
			}

			const titleCase = val.toLowerCase().replace(stripSeparatorRegex, " ").split(" ").map(word => {
				return word.replace(word[0], word[0] && word[0].toUpperCase());
			}).join(" ");

			return titleCase;
		},
		"lower case": val => {
			if (!val) {
				return "";
			}

			const smallCase = val.toLowerCase().replace(stripSeparatorRegex, " ").split(" ").join(" ");
			return smallCase;
		},
		"kebab-case": val => {
			if (!val) {
				return "";
			}

			const kebabCase = val.toLowerCase().replace(stripSeparatorRegex, " ").split(" ").join("-");
			return kebabCase;
		},
		"plus+case": val => {
			if (!val) {
				return "";
			}

			const plusCase = val.toLowerCase().replace(stripSeparatorRegex, " ").split(" ").join("+");
			return plusCase;
		},
		snake_case: val => {
			if (!val) {
				return "";
			}

			const snakeCase = val.toLowerCase().replace(stripSeparatorRegex, " ").split(" ").join("_");
			return snakeCase;
		},
		"fReE ForM": val => val
	};

	let config = {
		url: "",
		format: "Title Case",
		campaign: "",
		terms: ""
	};

	const initialUTMParams = { source: "", medium: "", content: "" };
	let utmParams = [initialUTMParams];
	let mounted = false;

	onMount(async () => {
		if (localStorage.derpy_utm_builder) {
			const tmp = JSON.parse(localStorage.derpy_utm_builder);
			$$invalidate(0, config = tmp.config);
			$$invalidate(1, utmParams = tmp.utmParams);
		}

		$$invalidate(10, mounted = true);
	});

	const addUTMRecord = id => {
		$$invalidate(2, selectedId = id);
		let tmp = utmParams;
		tmp.splice(id + 1, 0, { ...utmParams[id] });
		$$invalidate(1, utmParams = [...tmp]);
	};

	const deleteUTMRecord = id => {
		if (id) {
			$$invalidate(2, selectedId = id < utmParams.length - 1 ? id : id - 1);
		} else {
			$$invalidate(2, selectedId = 0);
		}

		if (utmParams.length === 1) {
			$$invalidate(1, utmParams = [initialUTMParams]);
			return;
		}

		let tmp = utmParams;
		tmp.splice(id, 1);
		$$invalidate(1, utmParams = [...tmp]);
	};

	let builtURL = blogURL;
	let selectedId = 0;

	const buildURL = () => {
		let { url, campaign, terms } = config;
		url = url.trim();

		if (!url) {
			return blogURL;
		}

		let tmp = url;
		let { source, medium, content } = utmParams[selectedId];
		campaign = campaign.trim();
		terms = terms.trim();
		source = source.trim();
		medium = medium.trim();
		content = content.trim();

		if (campaign) {
			tmp += `?utm_campaign=${campaign}`;

			if (source) {
				tmp += `&utm_source=${source}`;
			}

			if (medium) {
				tmp += `&utm_medium=${medium}`;

				if (terms) {
					tmp += `&utm_term=${terms}`;
				}

				if (content) {
					tmp += `&utm_content=${content}`;
				}

				return tmp;
			}
		}

		return "";
	};

	const copyURL = id => {
		$$invalidate(2, selectedId = id);
		copy(encodeURI(builtURL));
		showConfetti();

		iziToast.success({
			title: "OK",
			message: "Copied to Clipboard!",
			position: "topRight"
		});
	};

	function persistData() {
		localStorage.derpy_utm_builder = JSON.stringify({ config, utmParams });
	}

	function checkValidity() {
		$$invalidate(1, utmParams = utmParams.map(params => {
			const { source, medium } = params;

			return {
				...params,
				validity: config.campaign && source && medium
			};
		}));
	}

	function showConfetti() {
		function randomInRange(min, max) {
			return Math.random() * (max - min) + min;
		}

		confetti({
			angle: randomInRange(55, 125),
			spread: randomInRange(50, 70),
			particleCount: randomInRange(50, 100),
			origin: { y: 0.5 }
		});
	}

	function showFireWorks() {
		var duration = 15 * 1000;
		var animationEnd = Date.now() + duration;

		var defaults = {
			startVelocity: 30,
			spread: 360,
			ticks: 60,
			zIndex: 0
		};

		function randomInRange(min, max) {
			return Math.random() * (max - min) + min;
		}

		var interval = setInterval(
			function () {
				var timeLeft = animationEnd - Date.now();

				if (timeLeft <= 0) {
					return clearInterval(interval);
				}

				var particleCount = 50 * (timeLeft / duration);

				// since particles fall down, start a bit higher than random
				confetti(Object.assign({}, defaults, {
					particleCount,
					origin: {
						x: randomInRange(0.1, 0.3),
						y: Math.random() - 0.2
					}
				}));

				confetti(Object.assign({}, defaults, {
					particleCount,
					origin: {
						x: randomInRange(0.7, 0.9),
						y: Math.random() - 0.2
					}
				}));
			},
			250
		);
	}

	initTheme();

	function toggleTheme() {
		localStorage.theme = localStorage.theme === "dark" ? "light" : "dark";
		setTheme();
		showConfetti();
	}

	function input0_input_handler() {
		config.url = this.value;
		((($$invalidate(0, config), $$invalidate(1, utmParams)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
		$$invalidate(4, formatOptions);
	}

	function select_change_handler() {
		config.format = select_value(this);
		((($$invalidate(0, config), $$invalidate(1, utmParams)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
		$$invalidate(4, formatOptions);
	}

	function input1_input_handler() {
		config.campaign = this.value;
		((($$invalidate(0, config), $$invalidate(1, utmParams)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
		$$invalidate(4, formatOptions);
	}

	function input2_input_handler() {
		config.terms = this.value;
		((($$invalidate(0, config), $$invalidate(1, utmParams)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
		$$invalidate(4, formatOptions);
	}

	function input0_input_handler_1(each_value, id) {
		each_value[id].source = this.value;
		((($$invalidate(1, utmParams), $$invalidate(0, config)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
	}

	const focus_handler = id => $$invalidate(2, selectedId = id);

	function input1_input_handler_1(each_value, id) {
		each_value[id].medium = this.value;
		((($$invalidate(1, utmParams), $$invalidate(0, config)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
	}

	const focus_handler_1 = id => $$invalidate(2, selectedId = id);

	function input2_input_handler_1(each_value, id) {
		each_value[id].content = this.value;
		((($$invalidate(1, utmParams), $$invalidate(0, config)), $$invalidate(2, selectedId)), $$invalidate(10, mounted));
	}

	const focus_handler_2 = id => $$invalidate(2, selectedId = id);
	const click_handler = id => addUTMRecord(id);
	const click_handler_1 = id => copyURL(id);
	const click_handler_2 = id => deleteUTMRecord(id);

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*config, utmParams, selectedId, mounted*/ 1031) {
			$: {
				const format = formatters[config.format];
				const { campaign, terms } = config;

				$$invalidate(0, config = {
					...config,
					campaign: format(campaign),
					terms: format(terms)
				});

				const tmp = utmParams.map(({ source, medium, content }) => {
					return {
						source: format(source),
						medium: format(medium),
						content: format(content)
					};
				});

				$$invalidate(1, utmParams = tmp);
				$$invalidate(3, builtURL = buildURL(selectedId));
				checkValidity();
				mounted && persistData();
			}
		}
	};

	return [
		config,
		utmParams,
		selectedId,
		builtURL,
		formatOptions,
		addUTMRecord,
		deleteUTMRecord,
		copyURL,
		showFireWorks,
		toggleTheme,
		mounted,
		input0_input_handler,
		select_change_handler,
		input1_input_handler,
		input2_input_handler,
		input0_input_handler_1,
		focus_handler,
		input1_input_handler_1,
		focus_handler_1,
		input2_input_handler_1,
		focus_handler_2,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {}, [-1, -1]);
	}
}

export default App;